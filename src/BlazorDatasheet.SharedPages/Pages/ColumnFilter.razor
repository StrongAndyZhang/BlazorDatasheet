@page "/ColumnFilter"
@using System.Diagnostics
@using BlazorDatasheet.Core.Data
@using BlazorDatasheet.Core.Data.Filter
@using BlazorDatasheet.Formula.Core

<h1>Column filter</h1>

<p>Below column A has a filter applied that requires the value to contain "T". No other columns start with a filter applied. Filters can be added using the column context menu.</p>

<Datasheet 
    Sheet="Sheet" 
    Virtualise="true"/>

@code {

    private Sheet Sheet = new(500, 10);
    private Random Random = new();

    protected override void OnInitialized()
    {
        var sw = Stopwatch.StartNew();
        Console.WriteLine($"StartingUp {sw.ElapsedMilliseconds}");
        Sheet.Commands.PauseHistory();
        Sheet.BatchUpdates();
        Console.WriteLine($"about to loop {sw.ElapsedMilliseconds}");
        for (int i = 0; i < Sheet.NumCols; i++)
        {
            Console.WriteLine($"Generating words {i} {sw.ElapsedMilliseconds}");
            var uniqueWords = Generate(20);
            Console.WriteLine($"Words generated {i} {sw.ElapsedMilliseconds}");
            Console.WriteLine($"Setting cells {sw.ElapsedMilliseconds}");
            for (int j = 0; j < Sheet.NumRows; j++)
            {
                Sheet.Cells.SetValue(j, i, CellValue.Text(uniqueWords[Random.Next(0, uniqueWords.Length - 1)]));
            }

            Console.WriteLine($"End setting cells {sw.ElapsedMilliseconds}");
        }

        Console.WriteLine($"Setting filters {sw.ElapsedMilliseconds}");
        Sheet.Columns.Filters.Set(0,[new ValueFilter(), new PatternFilter(PatternFilterType.Contains, "T")]);

        Console.WriteLine($"End batching update {sw.ElapsedMilliseconds}");
        Sheet.EndBatchUpdates();
        Sheet.Commands.ResumeHistory();
        Sheet.ScreenUpdating = true;

        base.OnInitialized();
    }

    private string[] Generate(int size)
    {
        string[] words = new string[50];
        for (int i = 0; i < words.Length; i++)
        {
            words[i] = RandomString(10);
        }

        return words;
    }

    private string RandomString(int length)
    {
        const string chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
        return new string(Enumerable.Repeat(chars, length)
            .Select(s => s[Random.Next(s.Length)]).ToArray());
    }

}