@page "/CustomMenuItems"
@using System.Diagnostics
@using BlazorDatasheet.Core.Commands.Data
@using BlazorDatasheet.Core.Data
@using BlazorDatasheet.Core.Data.Filter
@using BlazorDatasheet.DataStructures.Geometry
@using BlazorDatasheet.Formula.Core
@using BlazorDatasheet.Menu

<h1>Custom Menu Items</h1>

<p>Demonstration of the sorting abilities</p>
<em>(select range of cells across rows display)</em>

<div>
    <input id="sort" type="checkbox" @bind="MenuOptions.SortRangeEnabled" />
    <label for="sort">System-defined "Sort"" options</label>
</div>
<div>
    <input id="user-menu-sort" type="checkbox" @bind="ShowSortByRow" />
    <label for="user-menu-sort">User-defined "Sort By Row" options</label>
</div>
<Datasheet @ref="_datasheet"
Sheet="Sheet"
MenuOptions="MenuOptions"
Virtualise="true">
    <MenuItems Context="sheet">
        @if (ShowSortByRow && sheet.Selection.ActiveRegion!.Height > 1)
        {
            // Always show a divider, even if the sort menu and its divider are removed
            if (!MenuOptions.SortRangeEnabled)
            {
                <SheetMenuDivider />
            }
            <SheetSubMenu Label="Sort By Row">
                <SheetMenuItem OnClick="() => sheet.SortRange(sheet.Range(Axis.Row, sheet.Selection.ActiveRegion.Top, sheet.Selection.ActiveRegion.Bottom)!.Region, new List<ColumnSortOptions>() { new ColumnSortOptions(sheet.Selection.ActiveCellPosition.col, true) })">Sort Rows Ascending</SheetMenuItem>
                <SheetMenuItem OnClick="() => sheet.SortRange(sheet.Range(Axis.Row, sheet.Selection.ActiveRegion.Top, sheet.Selection.ActiveRegion.Bottom)!.Region, new List<ColumnSortOptions>() { new ColumnSortOptions(sheet.Selection.ActiveCellPosition.col, false) })">Sort Rows Descending</SheetMenuItem>
            </SheetSubMenu>
        }
    </MenuItems>
</Datasheet>

@code {
    private Datasheet _datasheet;
    private Sheet Sheet = new(500, 10);
    private Random Random = new();
    private bool ShowSortByRow = true;
    private SheetMenuOptions MenuOptions = null!;


    protected override void OnInitialized()
    {
        Sheet.Commands.PauseHistory();
        Sheet.BatchUpdates();
        var values = new CellValue[500][];
        for (int r = 0; r < values.Length; r++)
            values[r] = new CellValue[10];

        for (int i = 0; i < Sheet.NumCols; i++)
        {
            for (int j = 0; j < Sheet.NumRows; j++)
            {
                int num = (i % 2 == 1) ? 500 - j : j;
                values[j][i] = CellValue.Number((i * 1000 + num));
            }
        }

        Sheet.Cells.SetValues(0, 0, values);

        MenuOptions = new SheetMenuOptions();

        Sheet.EndBatchUpdates();
        Sheet.Commands.ResumeHistory();
        Sheet.ScreenUpdating = true;


        base.OnInitialized();
    }
}
