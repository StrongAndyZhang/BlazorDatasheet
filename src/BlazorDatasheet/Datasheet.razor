@using BlazorDatasheet.Core.Layout
@using BlazorDatasheet.DataStructures.Geometry
@using BlazorDatasheet.Menu
@using BlazorDatasheet.Render
@using BlazorDatasheet.Render.Headings
@using BlazorDatasheet.Virtualise
@using BlazorDatasheet.Render.Layers
@using ColumnHeadingRenderer = BlazorDatasheet.Render.Headings.ColumnHeadingRenderer
@inherits SheetComponentBase

<SelectionMenu
    DefaultFilterTypes="DefaultFilterTypes"/>

<SheetMenuTarget MenuId="SelectionMenu"
                 MenuData="_sheet"
                 Margin="0"
                 Trigger="@MenuTrigger.OnContextMenu"
                 Placement="@MenuPlacement.BottomRight">

    <div
        @onmouseover="() => IsMouseInsideSheet = true"
        @onmouseout="() => IsMouseInsideSheet = false"
        class="vars sheet"
        style="@(GridLevel == 0 ? $"width:{TotalSheetWidth}px; height:{TotalSheetHeight}px;" : "")"
        theme="@_theme"
        @ref="_sheetContainer">
        <div style="display: flex; flex-direction: column; align-items:flex-start;">

            @if (ShowColHeadings)
            {
                <!-- Column headings -->
                <div class="sheet-col-head-container"
                     style="z-index: @(GridLevel + 2); @(StickyHeaders ? "position: sticky; top: 0;" : "")">
                    <div style="display: flex; flex-direction: row; align-items: flex-start">

                        @if (ShowRowHeadings)
                        {
                            <div class="sheet-cell row-head col-head"
                                 style="
                                     width: @(_sheet.Rows.HeadingWidth)px;
                                 z-index: @(GridLevel + 5);
                                 @(StickyHeaders ? "position: sticky; top: 0; left:0;" : "")
                                 height: @(_sheet.Columns.HeadingHeight)px;">
                            </div>
                        }

                        <ColumnHeadingRenderer
                            Sheet="_sheet"
                            AlternateAxisHeadingsShown="ShowRowHeadings"
                            FrozenStartCount="_frozenLeftCount"
                            FrozenEndCount="_frozenRightCount">
                            @if (ColumnHeaderTemplate != null)
                            {
                                @ColumnHeaderTemplate(context)
                            }
                            else
                            {
                                @context.Heading
                            }
                        </ColumnHeadingRenderer>
                    </div>
                </div>
            }

            @if (_frozenTopCount > 0)
            {
                <div
                    style="position: sticky; z-index: @(GridLevel + 2); top: @(ShowColHeadings && StickyHeaders ? _sheet.Columns.HeadingHeight + "px" : "0");"
                    class="bds-frozen-top">
                    <!-- Top sticky -->
                    <Datasheet
                        Theme="@_theme"
                        GridLevel="GridLevel + 1"
                        ShowColHeadings="false"
                        ShowRowHeadings="@ShowRowHeadings"
                        ShowFormulaDependents="@ShowFormulaDependents"
                        StickyHeaders="StickyHeaders"
                        FrozenLeftCount="_frozenLeftCount"
                        FrozenRightCount="_frozenRightCount"
                        ViewRegion="new(_viewRegion.Top, _viewRegion.Top + _frozenTopCount - 1, _viewRegion.Left, _viewRegion.Right)"
                        Sheet="_sheet"/>
                </div>
            }

            @{
                var numVisibleRows = _sheet.Rows.CountVisible(0, _sheet.NumRows);
                var numVisibleCols = _sheet.Columns.CountVisible(0, _sheet.NumCols);
            }
            @if (GridLevel == 0)
            {
                if (numVisibleCols == 0 && numVisibleRows == 0)
                {
                    <div></div>
                }
                else if (numVisibleRows == 0)
                {
                    if (EmptyRowsTemplate != null)
                    {
                        @EmptyRowsTemplate
                    }
                    else
                    {
                        <div class="sheet-row-head-container sheet-cell">No visible rows.</div>
                    }
                }
                else if (numVisibleCols == 0)
                {
                    if (EmptyColumnsTemplate != null)
                    {
                        @EmptyColumnsTemplate
                    }
                    else
                    {
                        <div class="sheet-row-head-container sheet-cell">No visible columns.</div>
                    }
                }
            }

            <div style="display: flex; flex-direction: row; align-items: flex-start;">

                @if (ShowRowHeadings)
                {
                    <div class="sheet-row-head-container"
                         style="z-index: @(GridLevel + 1);@(StickyHeaders ? "position: sticky; left: 0;" : "")">
                        <RowHeadingRenderer
                            AlternateAxisHeadingsShown="ShowColHeadings"
                            ViewRegion="MainViewRegion"
                            Sheet="_sheet">
                            @(context.Heading ?? (context.Id + 1).ToString())
                        </RowHeadingRenderer>
                    </div>
                }

                @if (_frozenLeftCount > 0)
                {
                    <!-- Left sticky -->
                    <div class="bds-frozen-left"
                         style="position: sticky; z-index: @(GridLevel + 1); left: @(ShowRowHeadings && StickyHeaders ? _sheet.Rows.HeadingWidth + "px" : "0");">
                        <Datasheet
                            Theme="@_theme"
                            GridLevel="GridLevel + 1"
                            ShowColHeadings="false"
                            ShowRowHeadings="false"
                            ShowFormulaDependents="@ShowFormulaDependents"
                            FrozenLeftCount="0"
                            FrozenRightCount="0"
                            Sheet="_sheet"
                            ViewRegion="new(MainViewRegion.Top, MainViewRegion.Bottom, _viewRegion.Left, _viewRegion.Left + _frozenLeftCount - 1)"/>
                    </div>
                }

                <LayerContainer Depth="@GridLevel" Sheet="_sheet" ViewRegion="MainViewRegion"
                                PointerInputService="_sheetPointerInputService">
                    <EditorLayer @ref="_editorLayer" CustomCellTypes="@CustomCellTypeDefinitions"/>
                    <HighlightLayer/>
                    <AutofillLayer/>
                    <VirtualMergesLayer Cache="_visualCellCache"/>
                    <SelectionRendererLayer/>
                    @if (_showFormulaDependents)
                    {
                        <FormulaDependenciesLayer/>
                    }
                </LayerContainer>

                <CascadingValue Value="Icons" Name="Icons" IsFixed="true">
                    <CascadingValue Value="CustomCellTypeDefinitions" Name="CustomCellTypeDefinitions" IsFixed="true">
                        <Virtualise2D
                            Class="@("bds-main-view-" + GridLevel)"
                            OnViewportChanged="HandleVirtualViewportChanged"
                            LayoutProvider="new CellLayoutProvider(_sheet)"
                            ViewRegion="MainViewRegion"
                            @ref="_mainView"
                            Context="vr">
                            <RowTemplate>
                                <DatasheetGridRow
                                    Row="vr.Row"
                                    VisibleColIndices="vr.VisibleColIndices"
                                    Sheet="_sheet"
                                    Cache="_visualCellCache"
                                    IsDirty="IsRowDirty(vr.Row)"/>
                            </RowTemplate>
                        </Virtualise2D>
                    </CascadingValue>
                </CascadingValue>


                @if (_frozenRightCount > 0)
                {
                    <div class="bds-frozen-right" style="position: sticky; right: 0; z-index:@(GridLevel + 1);">
                        <Datasheet
                            Theme="@_theme"
                            GridLevel="GridLevel + 1"
                            ShowColHeadings="false"
                            ShowFormulaDependents="@ShowFormulaDependents"
                            ShowRowHeadings="false"
                            FrozenRightCount="0"
                            FrozenLeftCount="0"
                            Sheet="_sheet"
                            ViewRegion="new Region(MainViewRegion.Top, MainViewRegion.Bottom, _viewRegion.Right - _frozenRightCount + 1, _viewRegion.Right)"/>
                    </div>
                }
            </div>

            @if (_frozenBottomCount > 0)
            {
                <div class="bds-frozen-bottom" style="position: sticky; z-index: @(GridLevel + 1); bottom: 0;">
                    <!-- Bottom sticky -->
                    <Datasheet
                        Theme="@_theme"
                        GridLevel="GridLevel + 1"
                        ShowColHeadings="false"
                        ShowFormulaDependents="@ShowFormulaDependents"
                        ShowRowHeadings="@ShowRowHeadings"
                        StickyHeaders="StickyHeaders"
                        FrozenLeftCount="_frozenLeftCount"
                        FrozenRightCount="_frozenRightCount"
                        ViewRegion="new(_viewRegion.Bottom - _frozenBottomCount + 1, _viewRegion.Bottom, _viewRegion.Left, _viewRegion.Right)"
                        Sheet="_sheet"/>
                </div>
            }

        </div>
    </div>

</SheetMenuTarget>