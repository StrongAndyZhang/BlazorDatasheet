@using BlazorDatasheet.Core.Layout
@using BlazorDatasheet.DataStructures.Geometry
@using BlazorDatasheet.Render
@using BlazorDatasheet.Render.DefaultComponents
@using BlazorDatasheet.Virtualise
@inherits SheetComponentBase

<div
    @onmouseover="() => IsMouseInsideSheet = true"
    @onmouseout="() => IsMouseInsideSheet = false"
    class="vars sheet"
    theme="@Theme"
    @ref="_sheetContainer">
    <div style="display: flex; flex-direction: column; align-items:flex-start;">

        @if (ShowColHeadings)
        {
            <!-- Column headings -->
            <div class="sheet-col-head-container" style="z-index: @(GridLevel + 2); @(StickyHeaders ? "position: sticky; top: 0;" : "")">
                <div style="display: flex; flex-direction: row; align-items: flex-start">

                    @if (ShowRowHeadings)
                    {
                        <div class="sheet-cell row-head col-head"
                             style="
                                     width: @(_sheet.Rows.HeadingWidth)px;
                                     z-index: @(GridLevel + 5);
                                     @(StickyHeaders ? "position: sticky; top: 0; left:0;" : "")
                                     height: @(_sheet.Columns.HeadingHeight)px;">
                        </div>
                    }

                    <ColumnHeadingRenderer
                        Sheet="_sheet"
                        AlternateAxisHeadingsShown="ShowRowHeadings"
                        FrozenStartCount="_frozenLeftCount"
                        FrozenEndCount="_frozenRightCount">
                        @(_sheet.Columns.GetHeading(context) ?? (context + 1).ToString())
                    </ColumnHeadingRenderer>
                </div>
            </div>
        }

        @if (_frozenTopCount > 0)
        {
            <div style="position: sticky; z-index: @(GridLevel + 2); top: @(ShowColHeadings ? _sheet.Columns.HeadingHeight + "px" : "0");" class="top-sticky">
                <!-- Top sticky -->
                <DatasheetCssGrid
                    GridLevel="GridLevel + 1"
                    ShowColHeadings="false"
                    ShowRowHeadings="@ShowRowHeadings"
                    FrozenLeftCount="_frozenLeftCount"
                    FrozenRightCount="_frozenRightCount"
                    ViewRegion="new(_viewRegion.Top, _viewRegion.Top + _frozenTopCount - 1, _viewRegion.Left, _viewRegion.Right)"
                    Sheet="_sheet"/>
            </div>
        }


        <div style="display: flex; flex-direction: row; align-items: flex-start;">

            @if (ShowRowHeadings)
            {
                <div class="sheet-row-head-container" style="z-index: @(GridLevel + 1);@(StickyHeaders ? "position: sticky; left: 0;" : "")">
                    <RowHeadingRenderer
                        AlternateAxisHeadingsShown="ShowColHeadings"
                        ViewRegion="MainViewRegion"
                        Sheet="_sheet">
                        @(_sheet.Rows.GetHeading(context) ?? (context + 1).ToString())
                    </RowHeadingRenderer>
                </div>
            }

            @if (_frozenLeftCount > 0)
            {
                <!-- Left sticky -->
                <div style="position: sticky; z-index: @(GridLevel + 1); left: @(ShowRowHeadings ? _sheet.Rows.HeadingWidth + "px" : "0");">
                    <DatasheetCssGrid
                        GridLevel="GridLevel + 1"
                        ShowColHeadings="false"
                        ShowRowHeadings="false"
                        FrozenLeftCount="0"
                        FrozenRightCount="0"
                        Sheet="_sheet"
                        ViewRegion="new(MainViewRegion.Top, MainViewRegion.Bottom, _viewRegion.Left, _viewRegion.Left + _frozenLeftCount - 1)"/>
                </div>
            }

            <LayerContainer Depth="@GridLevel" Sheet="_sheet" ViewRegion="MainViewRegion">
                <SelectionRendererNew/>
                <EditorLayer @ref="_editorLayer" CustomCellTypes="@CustomCellTypeDefinitions"/>
            </LayerContainer>

            <Virtualise2D
                LayoutProvider="new CellLayoutProvider(_sheet)"
                ViewRegion="MainViewRegion"
                @ref="_mainView"
                Context="cellPosition">
                <GridItemTemplate>
                    @{
                        var row = cellPosition.row;
                        var col = cellPosition.col;
                        var visualCell = new VisualCell(row, col, _sheet);

                        var rowSpan = 1;
                        var colSpan = 1;
                        var dataCol = col;
                        var dataRow = row;

                        if (!Virtualise && visualCell.Merge != null)
                        {
                            if (_sheet.Rows.IsVisible(visualCell.Merge.Top) && _sheet.Columns.IsVisible(visualCell.Merge.Left))
                            {
                                if (visualCell.Merge.Top == row && visualCell.Merge.Left == col)
                                {
                                    rowSpan = _sheet.Rows.CountVisible(row, visualCell.Merge.Bottom);
                                    colSpan = _sheet.Columns.CountVisible(col, visualCell.Merge.Right);
                                    dataCol = visualCell.Merge.Left;
                                    dataRow = visualCell.Merge.Top;
                                }
                            }
                            else // cell top left is not visible
                            {
                                var nextVisibleRow = _sheet.Rows.GetNextVisible(visualCell.Merge.Top - 1);
                                var nextVisibleCol = _sheet.Columns.GetNextVisible(visualCell.Merge.Left - 1);

                                if (nextVisibleCol == col && nextVisibleRow == row)
                                {
                                    rowSpan = _sheet.Rows.CountVisible(row, visualCell.Merge.Bottom);
                                    colSpan = _sheet.Columns.CountVisible(col, visualCell.Merge.Right);
                                    dataCol = visualCell.Merge.Left;
                                    dataRow = visualCell.Merge.Top;
                                    visualCell = new VisualCell(visualCell.Merge.Top, visualCell.Merge.Left, _sheet);
                                }
                            }
                        }
                    }
                    <div
                        data-row="@dataRow"
                        data-col="@dataCol"
                        class="sheet-cell"
                        style="@visualCell.FormatStyleString">
                        <div style="display: flex;">
                            @if (visualCell.Icon != null)
                            {
                                <div
                                    style="margin-right:2px; float:left; color: @(visualCell.Format?.IconColor ?? "var(--icon-color)");">
                                    @GetIconRenderFragment(visualCell.Icon)
                                </div>
                            }
                            @switch (visualCell.CellType)
                            {
                                case "default":
                                case "text":
                                case "datetime":
                                    <div style="width: 100%;">
                                        @visualCell.FormattedString
                                    </div>
                                    break;
                                case "boolean":
                                    <BoolRenderer Cell="visualCell" Sheet="Sheet"/>
                                    break;
                                case "select":
                                    <SelectRenderer Cell="visualCell" Sheet="Sheet"/>
                                    break;

                                default:
                                    <DynamicComponent
                                        Parameters="@GetCellRendererParameters(visualCell)"
                                        Type="@GetCellRendererType(visualCell.CellType)"/>
                                    break;
                            }
                        </div>
                    </div>
                </GridItemTemplate>
            </Virtualise2D>

            @if (_frozenRightCount > 0)
            {
                <div style="position: sticky; right: 0; z-index:@(GridLevel + 1);">
                    <DatasheetCssGrid
                        GridLevel="GridLevel + 1"
                        ShowColHeadings="false"
                        ShowRowHeadings="false"
                        FrozenRightCount="0"
                        FrozenLeftCount="0"
                        Sheet="_sheet"
                        ViewRegion="new Region(MainViewRegion.Top, MainViewRegion.Bottom, _viewRegion.Right - _frozenRightCount + 1, _viewRegion.Right)"/>
                </div>
            }
        </div >

        @if (_frozenBottomCount > 0)
        {
            <div style="position: sticky; z-index: @(GridLevel + 1); bottom: 0;">
                <!-- Bottom sticky -->
                <DatasheetCssGrid
                    GridLevel="GridLevel + 1"
                    ShowColHeadings="false"
                    ShowRowHeadings="@ShowRowHeadings"
                    FrozenLeftCount="_frozenLeftCount"
                    FrozenRightCount="_frozenRightCount"
                    ViewRegion="new(_viewRegion.Bottom - _frozenTopCount + 1, _viewRegion.Bottom, _viewRegion.Left, _viewRegion.Right)"
                    Sheet="_sheet"/>
            </div>
        }

    </div >
</div >