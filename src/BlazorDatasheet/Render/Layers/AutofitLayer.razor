@using BlazorDatasheet.Core.Data
@using BlazorDatasheet.Core.Events.Edit
@using BlazorDatasheet.Core.Layout
@using BlazorDatasheet.DataStructures.Geometry
@using Microsoft.JSInterop
@inherits Layer
@implements IAsyncDisposable
@inject IJSRuntime Js


<div class="bds-autoFit" style="visibility: hidden; top: 0; display:inline-block;" @ref="_autoFitEl">
    @if (CurrentCell != null)
    {
        @CellRenderFragment(CurrentCell)
    }
</div>


@code {

    [Parameter, EditorRequired]
    public required RenderFragment<VisualCell> CellRenderFragment { get; set; }

    private ElementReference _autoFitEl = default!;
    private bool _isAutofitting = true;
    private VisualCell? CurrentCell { get; set; }

    private IJSObjectReference? _module;

    protected override void OnSheetChange(Sheet newSheet, Sheet oldSheet)
    {
        if (Depth == 0) // main view only
        {
            oldSheet.Editor.EditAccepted -= EditorOnEditFinished;
            newSheet.Editor.EditAccepted += EditorOnEditFinished;
        }
    }

    private void EditorOnEditFinished(object? sender, EditAcceptedEventArgs e)
    {
        CurrentCell = new VisualCell(e.Row, e.Col, Sheet, 15);
        _isAutofitting = true;
        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _module = await Js.InvokeAsync<IJSObjectReference>("import", "./_content/BlazorDatasheet/Render/Layers/AutofitLayer.razor.js");
        }

        if (CurrentCell is not null)
        {
    // measure and auto-fit
            if (_module is not null)
            {
                var res = await _module.InvokeAsync<Size>("measure", _autoFitEl);
                if (res.Width > CurrentCell.Width)
                {
                    Sheet.Columns.SetSize(CurrentCell.Col, res.Width);
                }
                if (res.Height > CurrentCell.Height)
                {
                    Sheet.Rows.SetSize(CurrentCell.Row, res.Height);
                }
            }
        }
        _isAutofitting = false;
    }

    protected override bool ShouldRender()
    {
        return _isAutofitting;
    }

    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        if (_module is not null)
        {
            try
            {
                await _module.DisposeAsync();
            }
            catch (JSDisconnectedException)
            {
            }
        }
    }


}