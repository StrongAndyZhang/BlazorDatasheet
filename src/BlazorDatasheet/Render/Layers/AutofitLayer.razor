@using System.Windows.Input
@using BlazorDatasheet.Core.Commands
@using BlazorDatasheet.Core.Commands.Formatting
@using BlazorDatasheet.Core.Commands.RowCols
@using BlazorDatasheet.Core.Data
@using BlazorDatasheet.Core.Events.Commands
@using BlazorDatasheet.Core.Events.Edit
@using BlazorDatasheet.Core.Formats
@using BlazorDatasheet.DataStructures.Geometry
@using BlazorDatasheet.Util
@using Microsoft.JSInterop
@inherits Layer
@implements IAsyncDisposable
@inject IJSRuntime Js


<div class="bds-autoFit"
     style="@_dimensionStyle"
     @ref="_autoFitEl">
    @if (CurrentCell != null)
    {
        @CellRenderFragment(CurrentCell)
    }
</div>


@code {

    [Parameter, EditorRequired] public required RenderFragment<VisualCell> CellRenderFragment { get; set; }
    [Parameter, EditorRequired] public required bool DoAutoFit { get; set; }
    [Parameter, EditorRequired] public required int NumberOfSignificantDigits { get; set; }

    private ElementReference _autoFitEl = default!;

    private AutofitMethod _currentAutoFit = AutofitMethod.None;

    private string _dimensionStyle = string.Empty;
    private VisualCell? CurrentCell { get; set; }
    private IJSObjectReference? _module;
    // Command that triggered the autofit, so that we can attach the set size command to it and undo it when the format is undone.
    private IUndoableCommand? _currentSetFormatCommand;

    protected override void OnSheetChange(Sheet newSheet, Sheet oldSheet)
    {
        oldSheet.Editor.EditAccepted -= EditorOnEditFinished;
        newSheet.Editor.EditAccepted += EditorOnEditFinished;
        oldSheet.Commands.CommandRun -= CommandsOnCommandRun;
        newSheet.Commands.CommandRun += CommandsOnCommandRun;
    }

    private void CommandsOnCommandRun(object? sender, CommandRunEventArgs e)
    {
        if (e.Command is SetFormatCommand cmd)
        {
            if (cmd.Region.IsSingleCell())
            {
                _currentSetFormatCommand = cmd;
                AutoFit(cmd.Region.Top, cmd.Region.Left, AutofitMethod.Row);
            }
        }
    }

    private void EditorOnEditFinished(object? sender, EditAcceptedEventArgs e)
    {
        AutoFit(e.Row, e.Col, AutofitMethod.Column);
    }

    internal void AutoFit(int row, int column, AutofitMethod method)
    {
        if (method == AutofitMethod.None || !DoAutoFit)
            return;

        _currentAutoFit = method;
        CurrentCell = new VisualCell(row, column, Sheet, NumberOfSignificantDigits);
        var sb = new StyleBuilder();

        sb.AddStyle("max-width", CurrentCell.Width + "px", (method & AutofitMethod.Row) != 0 || CurrentCell.Format?.TextWrap == TextWrapping.Wrap);
        sb.AddStyle("max-height", CurrentCell.Height + "px", (method & AutofitMethod.Column) != 0 && CurrentCell.Format?.TextWrap != TextWrapping.Wrap);

        _dimensionStyle = sb.ToString();
        StateHasChanged();
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && _module == null)
        {
            _module = await Js.InvokeAsync<IJSObjectReference>("import", "./_content/BlazorDatasheet/Render/Layers/AutofitLayer.razor.js");
            return;
        }

        if (CurrentCell != null && _module != null && _currentAutoFit != AutofitMethod.None)
        {
            if (!DoAutoFit)
                return;

            var res = await _module.InvokeAsync<Size>("measureElement", _autoFitEl);

            if (res.Width > CurrentCell.Width)
            {
                // Expand the width as it will take into account merged cells.
                var delta = res.Width - CurrentCell.Width;
                Sheet.Columns.SetSize(CurrentCell.Col, Sheet.Columns.GetPhysicalWidth(CurrentCell.Col) + delta);
            }

            if (res.Height > CurrentCell.Height)
            {
                // Expand the height as it will take into account merged cells.
                var delta = res.Height - CurrentCell.Height;
                var setRowSizeCommand = new SetSizeCommand(CurrentCell.Row, CurrentCell.Row, Sheet.Rows.GetPhysicalHeight(CurrentCell.Row) + delta, Axis.Row);
                _currentSetFormatCommand?.AttachAfter(setRowSizeCommand); // so that this is undone when the format is undone
                Sheet.Commands.ExecuteCommand(setRowSizeCommand, false, _currentSetFormatCommand == null);
            }

            _currentAutoFit = AutofitMethod.None;
        }
    }

    protected override bool ShouldRender()
    {
        return (_currentAutoFit != AutofitMethod.None) || _module == null;
    }

    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        if (_module is not null)
        {
            try
            {
                await _module.DisposeAsync();
            }
            catch (JSDisconnectedException)
            {
            }
        }
    }


}