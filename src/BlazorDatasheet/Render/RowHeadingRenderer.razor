@using BlazorDatasheet.Core.Data
@using BlazorDatasheet.Core.Layout
@using BlazorDatasheet.DataStructures.Geometry
@using BlazorDatasheet.Render.Layout

<div style="display: flex; flex-direction: column">
    <div class="sheet-row-head-container" style="z-index: 2; position: sticky; left: 0;">
        <Virtualise2D
            LayoutProvider="_rowLayoutProvider"
            ViewRegion="new Region(_viewRegion.Top, _viewRegion.Bottom, 0, 0)">
            <GridItemTemplate>
                <div class="row-head sheet-cell">
                    @ChildContent(context.row)
                </div>
            </GridItemTemplate>
        </Virtualise2D>
    </div>
</div>

@code {
    
    [Parameter, EditorRequired] public Sheet? Sheet { get; set; }

    [Parameter] public Region? ViewRegion { get; set; }

    [Parameter] public bool AlternateAxisHeadingsShown { get; set; }

    [Parameter, EditorRequired] public RenderFragment<int> ChildContent { get; set; } = null!;

    private Sheet _sheet = new(1, 1);
    private Region _viewRegion = new(0, 0);
    private IGridLayoutProvider _rowLayoutProvider = new EmptyLayoutProvider();

    protected override void OnParametersSet()
    {
        if (Sheet != _sheet)
        {
            _sheet = Sheet ?? new(0, 0);
            _rowLayoutProvider = new RowHeadingLayoutProvider(_sheet);
            StateHasChanged();
        }

        if (ViewRegion != _viewRegion)
        {
            _viewRegion = ViewRegion ?? _sheet.Region;
        }

        base.OnParametersSet();
    }

    private string GetStickyPositionInfo()
    {
        return $"top: {(AlternateAxisHeadingsShown ? _sheet.Columns.HeadingHeight : 0)}px;";
    }

}