@using BlazorDatasheet.Render
@using BlazorDatasheet.Core.Data
@using BlazorDatasheet.Render.DefaultComponents

@{
    var visualCell = new VisualCell(Row, Col, Sheet);

    var rowSpan = 1;
    var colSpan = 1;
    var dataCol = Col;
    var dataRow = Row;

    if (!Virtualise && visualCell.Merge != null)
    {
        if (Sheet.Rows.IsVisible(visualCell.Merge.Top) && Sheet.Columns.IsVisible(visualCell.Merge.Left))
        {
            if (visualCell.Merge.Top == Row && visualCell.Merge.Left == Col)
            {
                rowSpan = Sheet.Rows.CountVisible(Row, visualCell.Merge.Bottom);
                colSpan = Sheet.Columns.CountVisible(Col, visualCell.Merge.Right);
                dataCol = visualCell.Merge.Left;
                dataRow = visualCell.Merge.Top;
            }
        }
        else // cell top left is not visible
        {
            var nextVisibleRow = Sheet.Rows.GetNextVisible(visualCell.Merge.Top - 1);
            var nextVisibleCol = Sheet.Columns.GetNextVisible(visualCell.Merge.Left - 1);

            if (nextVisibleCol == Col && nextVisibleRow == Row)
            {
                rowSpan = Sheet.Rows.CountVisible(Row, visualCell.Merge.Bottom);
                colSpan = Sheet.Columns.CountVisible(Col, visualCell.Merge.Right);
                dataCol = visualCell.Merge.Left;
                dataRow = visualCell.Merge.Top;
                visualCell = new VisualCell(visualCell.Merge.Top, visualCell.Merge.Left, Sheet);
            }
        }
    }
}
<div
    data-row="@dataRow"
    data-col="@dataCol"
    class="sheet-cell"
    style="@visualCell.FormatStyleString">
    <div style="display: flex;">
        @if (visualCell.Icon != null)
        {
            <!--
            <div
                style="margin-right:2px; float:left; color: @(visualCell.Format?.IconColor ?? "var(--icon-color)");">
                @GetIconRenderFragment(visualCell.Icon)
            </div>-->
        }
        @switch (visualCell.CellType)
        {
            case "default":
            case "text":
            case "datetime":
                <div style="width: 100%;">
                    @visualCell.FormattedString
                </div>
                break;
            case "boolean":
                <BoolRenderer Cell="visualCell" Sheet="Sheet"/>
                break;
            case "select":
                <SelectRenderer Cell="visualCell" Sheet="Sheet"/>
                break;

            /*default:
                                    <DynamicComponent
                                        Parameters="@GetCellRendererParameters(visualCell)"
                                        Type="@GetCellRendererType(visualCell.CellType)"/>
                                    break;*/
        }
    </div>
</div>

@code {

    [Parameter] public Sheet Sheet { get; set; }

    [Parameter] public int Row { get; set; }

    [Parameter] public int Col { get; set; }

    [Parameter] public bool Virtualise { get; set; }

    [Parameter] public bool IsDirty { get; set; }

    protected override bool ShouldRender() => IsDirty;

}