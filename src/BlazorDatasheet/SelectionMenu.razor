@using BlazorDatasheet.Core.Commands.Data
@using BlazorDatasheet.Core.Data
@using BlazorDatasheet.Core.Data.Filter
@using BlazorDatasheet.Core.Formats
@using BlazorDatasheet.DataStructures.Geometry
@using BlazorDatasheet.Formula.Core
@using BlazorDatasheet.Menu
@using BlazorDatasheet.Services
@inject IMenuService MenuService;

<SheetMenu MenuId="@ContextMenus.Selection">

    @{
        var sheet = context as Sheet;
    }

    @if (sheet is not null && sheet.Selection.ActiveRegion != null)
    {
        <MenuSection SectionId="0">
            <SheetMenuItem OnClick="() => sheet.Cells.ClearCells(sheet.Selection.Regions)">Clear</SheetMenuItem>
            @if (CanUserMergeRange)
            {
                <SheetMenuItem OnClick="() => sheet.Cells.Merge(sheet.Selection.Regions)">Merge</SheetMenuItem>
            }
            <SheetSubMenu Label="Alignment">
                <SheetMenuItem OnClick="@(() => sheet.SetFormat(sheet.Selection.Regions, new CellFormat() { TextAlign = "left" }))">Left</SheetMenuItem>
                <SheetMenuItem OnClick="@(() => sheet.SetFormat(sheet.Selection.Regions, new CellFormat() { TextAlign = "center" }))">Centre</SheetMenuItem>
                <SheetMenuItem OnClick="@(() => sheet.SetFormat(sheet.Selection.Regions, new CellFormat() { TextAlign = "right" }))">Right</SheetMenuItem>
            </SheetSubMenu>
        </MenuSection>

        @if (sheet.Selection.Regions.Count == 1 && sheet.Selection.ActiveRegion is ColumnRegion c)
        {
            @if (CanUserInsertCols || CanUserRemoveCols || CanUserHideCols)
            {
                <SheetMenuDivider/>
            }

            @if (CanUserInsertCols)
            {
                <SheetMenuItem OnClick="() => sheet.Columns.InsertAt(c.Left, c.Width)">Insert column(s) left</SheetMenuItem>
            }

            @if (CanUserRemoveCols)
            {
                <SheetMenuItem OnClick="() => sheet.Columns.RemoveAt(c.Left, c.Width)">Delete column(s)</SheetMenuItem>
            }

            @if (CanUserHideCols)
            {
                <SheetMenuDivider/>
                <SheetMenuItem OnClick="() => sheet.Columns.Hide(c.Left, c.Width)">Hide column(s)</SheetMenuItem>
                <SheetMenuItem OnClick="() => sheet.Columns.Unhide(c.Left, c.Width)">Un-hide column(s)</SheetMenuItem>
            }
        }

        @if (sheet.Selection.Regions.Count == 1 && sheet.Selection.ActiveRegion is RowRegion r)
        {
            @if (CanUserInsertRows || CanUserRemoveRows || CanUserHideRows)
            {
                <SheetMenuDivider/>
            }

            @if (CanUserInsertRows)
            {
                <SheetMenuItem OnClick="() => sheet.Rows.InsertAt(r.Top, r.Height)">Insert row(s) above</SheetMenuItem>
            }

            @if (CanUserRemoveRows)
            {
                <SheetMenuItem OnClick="() => sheet.Rows.RemoveAt(r.Top, r.Height)">Delete row(s)</SheetMenuItem>
            }

            @if (CanUserHideRows)
            {
                <SheetMenuDivider/>
                <SheetMenuItem OnClick="() => sheet.Rows.Hide(r.Top, r.Height)">Hide row(s)</SheetMenuItem>
                <SheetMenuItem OnClick="() => sheet.Rows.Unhide(r.Top, r.Height)">Un-hide row(s)</SheetMenuItem>
            }
        }

        @if (CanUserSort)
        {
            <SheetMenuDivider/>
            <SheetSubMenu Label="Sort">
                <SheetMenuItem OnClick="() => sheet.SortRange(sheet.Selection.ActiveRegion)">Sort Ascending</SheetMenuItem>
                <SheetMenuItem OnClick="() => sheet.SortRange(sheet.Selection.ActiveRegion, new List<ColumnSortOptions>() { new ColumnSortOptions(0, false) })">Sort Descending</SheetMenuItem>
            </SheetSubMenu>
        }

        @if (CanUserFilter &&
             sheet.Selection.Regions.Count == 1 &&
             sheet.Selection.ActiveRegion is ColumnRegion colRegion &&
             colRegion.Width == 1)
        {
            <SheetSubMenu Label="Filter" @ref="_filterSubMenu">
                <ColumnFilterEditor
                    DistinctColumnData="@DistinctColumnData"
                    ValueFilter="ActiveValueFilter"
                    ColumnIndex="@sheet.Selection.ActiveRegion.Left"/>
            </SheetSubMenu>
        }
    }

</SheetMenu>

@code {

    [Parameter] public bool CanUserRemoveRows { get; set; } = true;
    [Parameter] public bool CanUserRemoveCols { get; set; } = true;
    [Parameter] public bool CanUserInsertRows { get; set; } = true;
    [Parameter] public bool CanUserInsertCols { get; set; } = true;
    [Parameter] public bool CanUserSort { get; set; } = true;
    [Parameter] public bool CanUserMergeRange { get; set; } = true;
    [Parameter] public bool CanUserHideRows { get; set; } = true;
    [Parameter] public bool CanUserHideCols { get; set; } = true;
    [Parameter] public bool CanUserFilter { get; set; } = true;

    private IFilter? ActiveColumnFilter { get; set; }
    private List<CellValue> DistinctColumnData { get; set; }
    private ValueFilter ActiveValueFilter { get; set; } = null!;

    private SheetSubMenu _filterSubMenu = default!;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            MenuService.MenuShown += async (sender, args) =>
            {
                if (args.MenuId == _filterSubMenu?.SubMenuId)
                {
                    var sheet = args.Context as Sheet;
                    if (sheet == null)
                        return;

                    if (!CanUserFilter)
                        return;

                    if (sheet.Selection.ActiveRegion is ColumnRegion cr &&
                        sheet.Selection.Regions.Count == 1 &&
                        cr.Width == 1)
                    {
                        DistinctColumnData = await sheet.GetDistinctColumnDataAsync(cr.Left);
                        ActiveValueFilter = new ValueFilter(DistinctColumnData);
                    }
                }
            };
        }
    }

}